//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCF_consumer.WeatherService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ForecastSettings", Namespace="http://schemas.datacontract.org/2004/07/WeatherServiceAggregator")]
    [System.SerializableAttribute()]
    public partial class ForecastSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DayFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DayToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCF_consumer.WeatherService.TemperatureMeasure MeasureField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DayFrom {
            get {
                return this.DayFromField;
            }
            set {
                if ((this.DayFromField.Equals(value) != true)) {
                    this.DayFromField = value;
                    this.RaisePropertyChanged("DayFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DayTo {
            get {
                return this.DayToField;
            }
            set {
                if ((this.DayToField.Equals(value) != true)) {
                    this.DayToField = value;
                    this.RaisePropertyChanged("DayTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCF_consumer.WeatherService.TemperatureMeasure Measure {
            get {
                return this.MeasureField;
            }
            set {
                if ((this.MeasureField.Equals(value) != true)) {
                    this.MeasureField = value;
                    this.RaisePropertyChanged("Measure");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TemperatureMeasure", Namespace="http://schemas.datacontract.org/2004/07/WeatherServiceAggregator")]
    public enum TemperatureMeasure : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Celcius = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Forengeit = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WeatherForecast", Namespace="http://schemas.datacontract.org/2004/07/WeatherServiceAggregator")]
    [System.SerializableAttribute()]
    public partial class WeatherForecast : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] TemperaturesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Temperatures {
            get {
                return this.TemperaturesField;
            }
            set {
                if ((object.ReferenceEquals(this.TemperaturesField, value) != true)) {
                    this.TemperaturesField = value;
                    this.RaisePropertyChanged("Temperatures");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WeatherService.IWeatherService")]
    public interface IWeatherService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetTemperature", ReplyAction="http://tempuri.org/IWeatherService/GetTemperatureResponse")]
        int GetTemperature(int dayOffset);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetTemperature", ReplyAction="http://tempuri.org/IWeatherService/GetTemperatureResponse")]
        System.Threading.Tasks.Task<int> GetTemperatureAsync(int dayOffset);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IWeatherService/GetDataUsingDataContractResponse")]
        WCF_consumer.WeatherService.WeatherForecast GetDataUsingDataContract(WCF_consumer.WeatherService.ForecastSettings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IWeatherService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<WCF_consumer.WeatherService.WeatherForecast> GetDataUsingDataContractAsync(WCF_consumer.WeatherService.ForecastSettings settings);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWeatherServiceChannel : global::WCF_consumer.WeatherService.IWeatherService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WeatherServiceClient : System.ServiceModel.ClientBase<global::WCF_consumer.WeatherService.IWeatherService>, global::WCF_consumer.WeatherService.IWeatherService {
        
        public WeatherServiceClient() {
        }
        
        public WeatherServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WeatherServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int GetTemperature(int dayOffset) {
            return base.Channel.GetTemperature(dayOffset);
        }
        
        public System.Threading.Tasks.Task<int> GetTemperatureAsync(int dayOffset) {
            return base.Channel.GetTemperatureAsync(dayOffset);
        }
        
        public WCF_consumer.WeatherService.WeatherForecast GetDataUsingDataContract(WCF_consumer.WeatherService.ForecastSettings settings) {
            return base.Channel.GetDataUsingDataContract(settings);
        }
        
        public System.Threading.Tasks.Task<WCF_consumer.WeatherService.WeatherForecast> GetDataUsingDataContractAsync(WCF_consumer.WeatherService.ForecastSettings settings) {
            return base.Channel.GetDataUsingDataContractAsync(settings);
        }
    }
}
